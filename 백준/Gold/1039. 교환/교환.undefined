#include <bits/stdc++.h>
using namespace std;

int res = -1, N, K;
bool visited[1000001];

void swap(string& s, int a, int b) {
	char c = s[a];
	s[a] = s[b];
	s[b] = c;
}

void solve() {
	queue<pair<string, int>> q;	// val, cnt
	string original = to_string(N);
	q.push({ original, 0 });
	int len = original.length();
	for (int i = 0; i < pow(10, len - 1); i++)
		visited[i] = true;

	string val;
	int cnt;
	bool dd = false;
	for (int i = 0; i < len; i++)
		for (int j = i + 1; j < len; j++)
			if (original[i] == original[j])
				dd = true;

	while (!q.empty()) {
		tie(val, cnt) = q.front();
		q.pop();

		if (dd || cnt > 0 && cnt % 2 == K % 2)
			res = max(res, stoi(val));
		if (cnt == K)
			continue;

		for (int i = 0; i < len; i++)
			for (int j = i + 1; j < len; j++) {
				swap(val, i, j);
				if (!visited[stoi(val)]) {
					if (cnt != 0)
						visited[stoi(val)] = true;
					q.push({ val, cnt + 1 });
				}
				swap(val, i, j);
			}
	}
}

int main(void) {
	cin >> N >> K;
	solve();
	cout << res;
}