#include <bits/stdc++.h>
using namespace std;

int N, M, R;
int board[300][300];

vector<vector<int>> edge;
vector<int> root;

void setEdge() {
	int yB, yE, xB, xE;
	yB = xB = 0;
	yE = N - 1, xE = M - 1;
	edge = vector<vector<int>>(min(N, M) / 2);

	int idx = 0;
	while (yB <= yE && xB <= xE) {
		int i = yB, j = xB;
		while (i < yE) {
			edge[idx].push_back(board[i][j]);
			i++;
		}
		while (j < xE) {
			edge[idx].push_back(board[i][j]);
			j++;
		}
		while (i > yB) {
			edge[idx].push_back(board[i][j]);
			i--;
		}
		while (j > xB) {
			edge[idx].push_back(board[i][j]);
			j--;
		}
		xB++;
		yE--;
		xE--;
		yB++;
		idx++;
	}
}

void rotate() {
	int k = edge.size();
	root = vector<int>(k, 0);
	for (int i = 0; i < k; i++) {
		int mod = edge[i].size();
		root[i] = (mod - R % mod) % mod;
	}
}

void setBoardByEdge() {
	int yB, yE, xB, xE;
	yB = xB = 0;
	yE = N - 1, xE = M - 1;

	int idx = 0;
	while (yB <= yE && xB <= xE) {
		int i = yB, j = xB;
		int Inidx = root[idx];
		while (i < yE) {
			board[i][j] = edge[idx][Inidx];
			Inidx = (Inidx + 1) % edge[idx].size();
			i++;
		}
		while (j < xE) {
			board[i][j] = edge[idx][Inidx];
			Inidx = (Inidx + 1) % edge[idx].size();
			j++;
		}
		while (i > yB) {
			board[i][j] = edge[idx][Inidx];
			Inidx = (Inidx + 1) % edge[idx].size();
			i--;
		}
		while (j > xB) {
			board[i][j] = edge[idx][Inidx];
			Inidx = (Inidx + 1) % edge[idx].size();
			j--;
		}
		xB++;
		yE--;
		xE--;
		yB++;
		idx++;
	}
}

int main(void) {
	cin.tie(NULL);
	ios_base::sync_with_stdio(false);
	cin >> N >> M >> R;
	for (int i = 0; i < N; i++)
		for (int j = 0; j < M; j++)
			cin >> board[i][j];

	setEdge();
	rotate();
	setBoardByEdge();
	
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++)
			cout << board[i][j] << ' ';
		cout << '\n';
	}
}