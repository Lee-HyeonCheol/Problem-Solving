#include <bits/stdc++.h>
using namespace std;

int dy[4] = { -1, 0, 1, 0 };
int dx[4] = { 0, -1, 0, 1 };
map<vector<int>, int> checked;
vector<int> board(9), TARGET(9);

void swap(int& a, int& b) {
	int t = a;
	a = b;
	b = t;
}

void bfs() {
	queue<pair<vector<int>, int>> q;
	q.push({ board, 0 });
	checked[board] = -1;

	while (!q.empty()) {
		vector<int> cur = q.front().first;
		int cnt = q.front().second;
		q.pop();
		int cy, cx;
		for (int i = 0; i < 9; i++)
			if (cur[i] == 0)
				cy = i / 3, cx = i % 3;

		for (int i = 0; i < 4; i++) {
			int ny = cy + dy[i];
			int nx = cx + dx[i];
			if (ny < 0 || nx < 0 || ny >= 3 || nx >= 3) continue;
			swap(cur[cy * 3 + cx], cur[ny * 3 + nx]);
			int& x = checked[cur];
			if (x == 0) {
				q.push({ cur, cnt + 1 });
				x = cnt + 1;
			}
			swap(cur[cy * 3 + cx], cur[ny * 3 + nx]);
		}
	}
}

int main(void) {
	for (int i = 0; i < 9; i++)
		cin >> TARGET[i];
	for (int i = 0; i < 9; i++)
		board[i] = (i + 1) % 9;
	bfs();
	int res = checked[TARGET];
	if (res == 0)
		cout << -1;
	else if (res == -1)
		cout << 0;
	else
		cout << res;
}