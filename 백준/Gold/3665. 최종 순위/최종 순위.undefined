#include <bits/stdc++.h>
using namespace std;

int T, N, M, a, b;
vector<int> graph[501];
vector<int> res;
int indegree[501];

void topsort() {
	queue<int> q;

	for (int i = 1; i <= N; i++)
		if (indegree[i] == 0)
			q.push(i);

	while (!q.empty()) {
		int cur = q.front();
		q.pop();
		res.push_back(cur);
		if (q.size() != 0)
			return;

		for (auto& next : graph[cur]) {
			indegree[next]--;
			if (indegree[next] == 0)
				q.push(next);
		}
	}
}

int main(void) {
	cin.tie(NULL);
	ios_base::sync_with_stdio(false);
	cin >> T;
	while (T--) {
		cin >> N;
		vector<int> prev(N);
		set<pair<int, int>> info; // a, b : a가 b보다 앞순위
		for (int i = 1; i <= N; i++)
			graph[i].clear();
		res.clear();
		memset(indegree, 0, sizeof(indegree));

		for (int i = 0; i < N; i++)
			cin >> prev[i];
		for (int i = 0; i < N; i++)
			for (int j = i + 1; j < N; j++)
				info.insert({ prev[i], prev[j]});

		cin >> M;
		vector<pair<int, int>> changed(M);
		for (int j = 0; j < M; j++)
			cin >> changed[j].first >> changed[j].second;

		bool impossible = false;
		for (int j = 0; j < M; j++) {
			tie(a, b) = changed[j];
			if (info.find({ b, a }) == info.end() && info.find({ a, b}) != info.end()) {
				info.erase({ a, b });
				info.insert({ b, a });
			}
			else if (info.find({ a, b }) == info.end() && info.find({ b, a }) != info.end()) {
				info.erase({ b, a });
				info.insert({ a, b });
			}
			else {
				impossible = true;
				break;
			}
		}
		if (impossible) {
			cout << "IMPOSSIBLE\n";
			continue;
		}

		for (auto& it : info) {
			graph[it.first].push_back(it.second);
			indegree[it.second]++;
		}
		
		topsort();

		if (res.size() != N)
			cout << "IMPOSSIBLE";
		else
			for (auto& it : res)
				cout << it << ' ';
		cout << '\n';
	}
}