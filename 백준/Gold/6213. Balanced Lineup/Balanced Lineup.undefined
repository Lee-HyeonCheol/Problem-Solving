#include <bits/stdc++.h>
using namespace std;

int N, M, a, b;

struct SegmentTree {
	int N;
	vector<pair<int, int>> tree;

	SegmentTree(vector<int>& arr) {
		N = arr.size();
		int x = 2;
		while (x <= N) x *= 2;
		tree.resize(x * 2);
		init(arr, 0, N - 1, 1);
	}

	pair<int, int> init(vector<int>& arr, int left, int right, int node) {
		if (left == right) return tree[node] = { arr[left], arr[left] };

		int mid = (left + right) / 2;
		auto L = init(arr, left, mid, node * 2);
		auto R = init(arr, mid + 1, right, node * 2 + 1);
		return tree[node] = { min(L.first, R.first), max(L.second, R.second) };
	}

	pair<int, int> query(int left, int right, int node, int leftNode, int rightNode) {
		if (right < leftNode || left > rightNode) return { INT_MAX, INT_MIN };
		if (left <= leftNode && rightNode <= right) return tree[node];

		int mid = (leftNode + rightNode) / 2;
		auto L = query(left, right, node * 2, leftNode, mid);
		auto R = query(left, right, node * 2 + 1, mid + 1, rightNode);
		return { min(L.first, R.first), max(L.second, R.second) };
	}

	pair<int, int> query(int left, int right) {
		return query(left, right, 1, 0, N - 1);
	}

	pair<int, int> update(int idx, int val, int node, int leftNode, int rightNode) {
		if (idx < leftNode || idx > rightNode) return tree[node];
		if (leftNode == rightNode) return tree[node] = { val, val };

		int mid = (leftNode + rightNode);
		auto L = update(idx, val, node * 2, leftNode, mid);
		auto R = update(idx, val, node * 2 + 1, mid + 1, rightNode);
		return tree[node] = { min(L.first, R.first), max(L.second, R.second) };
	}

	void update(int idx, int val) {
		update(idx, val, 1, 0, N - 1);
	}
};

int main(void) {
	cin.tie(NULL);
	ios_base::sync_with_stdio(false);
	cin >> N >> M;
	vector<int> arr(N);
	for (int i = 0; i < N; i++)
		cin >> arr[i];
	SegmentTree T(arr);

	for (int i = 0; i < M; i++) {
		cin >> a >> b;
		auto q = T.query(a - 1, b - 1);
		cout << q.second - q.first << '\n';
	}
}