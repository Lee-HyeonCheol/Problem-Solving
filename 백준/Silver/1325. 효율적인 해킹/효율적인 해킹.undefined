#include <bits/stdc++.h>
using namespace std;

int N, M, a, b;

vector<int> graph[10001];
bool visited[10001];
int cnt[10001];
int resCnt[10001];

int dfs(int cur) {
	cnt[cur]++;

	for (auto& next : graph[cur]) {
		if (visited[next]) continue;
		visited[next] = true;
		if (cnt[next] != 0) cnt[cur] += cnt[next];
		else cnt[cur] += dfs(next);
	}
	return cnt[cur];
}

int main(void) {
	cin.tie(NULL);
	ios_base::sync_with_stdio(false);
	cin >> N >> M;
	for (int i = 0; i < M; i++) {
		cin >> a >> b;
		graph[b].push_back(a);
	}

	for (int i = 1; i <= N; i++) {
		memset(visited, false, sizeof(visited));
		memset(cnt, 0, sizeof(cnt));
		visited[i] = true;
		resCnt[i] = dfs(i);
	}

	int maxV = 0;
	for (int i = 1; i <= N; i++)
		maxV = max(maxV, resCnt[i]);
	for (int i = 1; i <= N; i++)
		if (maxV == resCnt[i])
			cout << i << ' ';
}