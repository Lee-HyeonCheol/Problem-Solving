#include <bits/stdc++.h>
using namespace std;

int N, M;
int dy[4] = { -1, 0, 1, 0 };
int dx[4] = { 0, -1, 0, 1 };
char board[50][50];
bool visited[50][50];
bool is_in_range(int y, int x) {
	return y >= 0 && y < N && x >= 0 && x < M;
}

int BtoI(int y, int x) {
	if (board[y][x] == '-') return 1;
	return 0;
}

void dfs(int y, int x) {
	int MOD = BtoI(y, x);

	for (int i = 0; i < 4; i++) {
		if (i % 2 != MOD) continue;
		int ny = y + dy[i];
		int nx = x + dx[i];

		if (is_in_range(ny, nx) && !visited[ny][nx] && BtoI(ny, nx) == MOD) {
			visited[ny][nx] = true;
			dfs(ny, nx);
		}
	}
}

int main(void) {
	cin.tie(NULL);
	ios_base::sync_with_stdio(false);
	cin >> N >> M;
	for (int i = 0; i < N; i++)
		for (int j = 0; j < M; j++)
			cin >> board[i][j];

	int res = 0;
	for (int i = 0; i < N; i++)
		for (int j = 0; j < M; j++) {
			if (visited[i][j]) continue;
			visited[i][j] = true;
			dfs(i, j);
			res++;
		}
	cout << res;
}