#include <bits/stdc++.h>
using namespace std;

const int MAX = pow(10, 9) + 1;
int N, K;
int cacheLen[501], cacheCnt[501], seq[500];

int Lis(int start) {
	int& ret = cacheLen[start + 1];
	if (ret != -1) return ret;
	ret = 1;
	for (int next = start + 1; next < N; next++)
		if (start == -1 || seq[start] < seq[next])
			ret = max(ret, Lis(next) + 1);
	return ret;
}

int Count(int start) {
	if (Lis(start) == 1) return 1;
	int& ret = cacheCnt[start + 1];
	if (ret != -1) return ret;
	ret = 0;
	for (int next = start + 1; next < N; next++)
		if ((start == -1 || seq[start] < seq[next]) &&
			Lis(start) == Lis(next) + 1)
			ret = min<long long>(MAX, (long long)ret + Count(next));
	return ret;
}

void reconstruct(int start, int skip, vector<int>& lis) {
	if (start != -1) lis.push_back(seq[start]);
	vector<pair<int, int>> followers;
	for (int next = start + 1; next < N; next++)
		if ((start == -1 || seq[start] < seq[next]) &&
			Lis(start) == Lis(next) + 1)
			followers.push_back(make_pair(seq[next], next));
	sort(followers.begin(), followers.end());

	for (int i = 0; i < followers.size(); i++) {
		int idx = followers[i].second;
		int cnt = Count(idx);
		if (cnt <= skip)
			skip -= cnt;
		else {
			reconstruct(idx, skip, lis);
			break;
		}
	}
}

int main(void) {
	cin.tie(NULL);
	ios_base::sync_with_stdio(false);
	memset(cacheLen, -1, sizeof(cacheLen));
	memset(cacheCnt, -1, sizeof(cacheCnt));
	cin >> N >> K;
	for (int i = 0; i < N; i++)
		cin >> seq[i];
	vector<int> res;
	reconstruct(-1, K - 1, res);
	if (res.empty())
		cout << -1;
	else
		for (auto& it : res)
			cout << it << ' ';
}