#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;

int N;

struct FenwickTree {
	vector<int> tree;
	FenwickTree(int n) : tree(n + 1) {}

	int sum(int pos) {
		pos++;
		int ret = 0;

		while (pos > 0) {
			ret += tree[pos];
			pos &= (pos - 1);
		}
		return ret;
	}

	void add(int pos, int val) {
		pos++;
		
		while (pos < tree.size()) {
			tree[pos] += val;
			pos += (pos & -pos);
		}
	}
};

int main(void) {
	cin.tie(NULL);
	ios_base::sync_with_stdio(false);
	cin >> N;
	vector<int> arr(N), tarr;
	for (int i = 0; i < N; i++)
		cin >> arr[i];
	tarr = arr;
	sort(tarr.begin(), tarr.end());
	int idx = 1;
	unordered_map<int, int> compac;
	for (auto& i : tarr) {
		if (compac[i]) continue;
		compac[i] = idx++;
	}
	FenwickTree fen(idx + 1);
	long long res = 0;
	for (int i = 0; i < N; i++) {
		int K = compac[arr[i]];
		res += fen.sum(idx) - fen.sum(K);
		fen.add(K, 1);
	}
	cout << res;
}