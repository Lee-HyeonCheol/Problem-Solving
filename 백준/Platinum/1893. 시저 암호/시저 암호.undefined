#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;

int T, ASIZE;
string A, W, S;
unordered_map<char, int> pos;

string getShiftPattern(int shift) {
	if (shift == 0) return W;
	string ret = "";
	for (auto& it : W)
		ret += A[(pos[it] + shift) % ASIZE];
	return ret;
}

vector<int> getPartitionMatch(const string& P) {
	int m = P.length();
	vector<int> pi(m, 0);
	int begin = 1, matched = 0;

	while (begin + matched < m) {
		if (P[begin + matched] == P[matched]) {
			matched++;
			pi[begin + matched - 1] = matched;
		}
		else {
			if (matched == 0)
				begin++;
			else {
				begin += matched - pi[matched - 1];
				matched = pi[matched - 1];
			}
		}
	}
	return pi;
}

vector<int> kmp(const string& H, const string& P) {
	int n = H.length(), m = P.length();
	vector<int> pi = getPartitionMatch(P);
	vector<int> ret;
	int begin = 0, matched = 0;

	while (begin <= n - m) {
		if (matched < m && H[begin + matched] == P[matched]) {
			matched++;
			if (matched == m) {
				ret.push_back(begin);
				if (ret.size() >= 2)
					return ret;
			}
		}
		else {
			if (matched == 0)
				begin++;
			else {
				begin += matched - pi[matched - 1];
				matched = pi[matched - 1];
			}
		}
	}
	return ret;
}

int main(void) {
	cin.tie(NULL);
	ios_base::sync_with_stdio(false);	
	cin >> T;
	while (T--) {
		cin >> A >> W >> S;
		ASIZE = A.size();
		pos.clear();
		vector<int> ret;
		for (int i = 0; i < A.size(); i++)
			pos[A[i]] = i;

		string pattern;
		for (int i = 0; i < A.size(); i++) {
			pattern = getShiftPattern(i);
			vector<int> patternPos = kmp(S, pattern);
			if (patternPos.size() == 1)
				ret.push_back(i);
		}

		if (ret.size() == 0)
			cout << "no solution\n";
		else if (ret.size() == 1)
			cout << "unique: " << ret[0] << '\n';
		else {
			cout << "ambiguous: ";
			for (auto& it : ret)
				cout << it << ' ';
			cout << '\n';
		}
	}
}