#include <bits/stdc++.h>
using namespace std;

struct person {
	int val, idx;
};

int N;
vector<person> seq;

bool compare_v(person& a, person& b) {
	return a.val < b.val;
}

bool compare_i(person& a, person& b) {
	return a.idx < b.idx;
}

struct FenwickTree {
	vector<int> tree;
	FenwickTree(int n) : tree(n + 1) {}

	int sum(int pos) {
		pos++;
		int ret = 0;
		while (pos > 0) {
			ret += tree[pos];
			pos &= (pos - 1);
		}
		return ret;
	}

	void add(int pos, int val) {
		pos++;
		while (pos < tree.size()) {
			tree[pos] += val;
			pos += (pos & -pos);
		}
	}
};

int main(void) {
	cin.tie(NULL);
	ios_base::sync_with_stdio(false);
	cin >> N;
	seq.resize(N);
	for (int i = 0; i < N; i++) {
		cin >> seq[i].val;
		seq[i].idx = i;
	}
	sort(seq.begin(), seq.end(), compare_v);
	int K = 0;
	for (int i = 0; i < N; i++)
		seq[i].val = K++;
	sort(seq.begin(), seq.end(), compare_i);

	FenwickTree F(N + 1);
	for (auto& it : seq) {
		cout << F.sum(N - 1) - F.sum(it.val - 1) + 1 << '\n';
		F.add(it.val, 1);
	}
}