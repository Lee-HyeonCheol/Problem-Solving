#include <bits/stdc++.h>
using namespace std;

int N, K;
vector<int> input;

struct FenwickTree {
	vector<int> tree;
	FenwickTree() {
		tree = vector<int>(65537, 0);
	}

	int sum(int pos) {
		pos++;
		int ret = 0;
		while (pos > 0) {
			ret += tree[pos];
			pos &= (pos - 1);
		}
		return ret;
	}

	void add(int pos, int val) {
		pos++;
		while (pos < tree.size()) {
			tree[pos] += val;
			pos += (pos & -pos);
		}
	}

	int queryKth(int K) {
		int l = 0, r = 65535, mid;

		while (l < r) {
			mid = (l + r) / 2;
			int x = sum(mid);
			if (x < K) l = mid + 1;
			else r = mid;
		}
		return l;
	}
};

int main(void) {
	cin.tie(NULL);
	ios_base::sync_with_stdio(false);
	cin >> N >> K;
	input.resize(N);
	for (int i = 0; i < N; i++)
		cin >> input[i];

	long long res = 0;
	FenwickTree T;
	for (int i = 0; i < K - 1; i++)
		T.add(input[i], 1);

	for (int i = K - 1; i < N; i++) {
		T.add(input[i], 1);
		res += T.queryKth((K + 1) / 2);
		T.add(input[i - K + 1], -1);
	}
	cout << res;
}