#include <bits/stdc++.h>
using namespace std;

int T, N, M, x, SIZE, top;
int pos[100001];
bool isIn[200001];
int tree[800001];

int init(int l, int r, int node) {
	if (l == r) return tree[node] = isIn[l];

	int mid = (l + r) / 2;
	return tree[node] = init(l, mid, node * 2) + init(mid + 1, r, node * 2 + 1);
}

int query(int l, int r, int node, int nodeLeft, int nodeRight) {
	if (l > nodeRight || r < nodeLeft) return 0;
	if (l <= nodeLeft && nodeRight <= r) return tree[node];
	
	int mid = (nodeLeft + nodeRight) / 2;
	return query(l, r, node * 2, nodeLeft, mid) + query(l, r, node * 2 + 1, mid + 1, nodeRight);
}

int query(int l, int r) {
	return query(l, r, 1, 0, SIZE);
}

int update(int idx, int val, int node, int nodeLeft, int nodeRight) {
	if (idx < nodeLeft || idx > nodeRight) return tree[node];
	if (nodeLeft == nodeRight) return tree[node] = val;

	int mid = (nodeLeft + nodeRight) / 2;
	return tree[node] = update(idx, val, node * 2, nodeLeft, mid) + update(idx, val, node * 2 + 1, mid + 1, nodeRight);
}

void update(int idx, int val) {
	update(idx, val, 1, 0, SIZE);
}

int main(void) {
	cin.tie(NULL);
	ios_base::sync_with_stdio(false);
	cin >> T;
	while (T--) {
		cin >> N >> M;
		SIZE = N + M;
		top = N;
		memset(pos, 0, sizeof(pos));
		memset(isIn, 0, sizeof(isIn));
		memset(tree, 0, sizeof(tree));
		for (int i = 1; i <= N; i++)
			pos[i] = N - i + 1;
		for (int i = 1; i <= N; i++)
			isIn[pos[i]] = true;
		init(0, SIZE, 1);
		
		for (int i = 0; i < M; i++) {
			cin >> x;
			cout << query(pos[x], SIZE) - 1 << " ";
			update(pos[x], 0);

			pos[x] = ++top;
			update(pos[x], 1);
		}
		cout << '\n';
	}
}