#include <bits/stdc++.h>
using namespace std;

vector<int> getPartialMatch(const string& P) {
	int m = P.length();
	vector<int> pi(m, 0);
	int begin = 1, matched = 0;

	while (begin + matched < m) {
		if (P[begin + matched] == P[matched]) {
			matched++;
			pi[begin + matched - 1] = matched;
		}
		else {
			if (matched == 0)
				begin++;
			else {
				begin += matched - pi[matched - 1];
				matched = pi[matched - 1];
			}
		}
	}
	return pi;
}

vector<int> kmp(const string& H, const string& P) {
	int n = H.length(), m = P.length();
	vector<int> pi = getPartialMatch(P);
	vector<int> ret;
	int begin = 0, matched = 0;

	while (begin <= n - m) {
		if (matched < m && H[begin + matched] == P[matched]) {
			matched++;
			if (matched == m)
				ret.push_back(begin);
		}
		else {
			if (matched == 0)
				begin++;
			else {
				begin += matched - pi[matched - 1];
				matched = pi[matched - 1];
			}
		}
	}
	return ret;
}

int main(void) {
	cin.tie(NULL);
	ios_base::sync_with_stdio(false);
	string S;
	cin >> S;
	int m = S.length();
	vector<int> pi = getPartialMatch(S);
	int LEN = pi[m - 1];

	for (int i = LEN; i > 0; i--) {
		string pre = S.substr(0, i);
		string post = S.substr(m - i);
		if (pre != post)
			continue;
		vector<int> pos = kmp(S, pre);
		if (pos.size() >= 3) {
			cout << pre;
			return 0;
		}
	}
	cout << -1;
}