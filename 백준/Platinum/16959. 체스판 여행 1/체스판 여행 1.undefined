#include <bits/stdc++.h>
using namespace std;

const int INF = 123456789;
int Kdy[8] = {-1, -2, -2, -1, 1, 2, 2, 1};
int Kdx[8] = {-2, -1, 1, 2, 2, 1, -1, -2};
int Bdy[4] = {-1, -1, 1, 1};
int Bdx[4] = {-1, 1, -1, 1};
int Rdy[4] = {-1, 0, 1, 0};
int Rdx[4] = {0, -1, 0, 1};

// mode 0 : knight, 1 : bishop, 2 : rook
struct point {
	int y, x, cnt, check, mode;
};

struct cmp {
	bool operator() (point& a, point& b) const {
		if (a.cnt == b.cnt)
			return a.check < b.check;
		return a.cnt > b.cnt;
	}
};

int N, sy, sx, target;
int board[10][10];
int visited[10][10][3][101]; // y, x, mode, check

bool is_in_range(int y, int x) {
	return y >= 0 && y < N && x >= 0 && x < N;
}

int bfs(int sy, int sx) {
	priority_queue<point, vector<point>, cmp> pq;
	for (int i = 0; i < 3; i++) {
		pq.push({ sy, sx, 0, 1, i });
		visited[sy][sx][i][1] = 0;
	}

	while (!pq.empty()) {
		point cur = pq.top();
		pq.pop();

		//cout << cur.y << ", " << cur.x << ", cur.cnt : " << cur.cnt << ", cur.mode : " << cur.mode << ", cur.check : " << cur.check << '\n';
		if (cur.check == target)
			return cur.cnt;

		if (visited[cur.y][cur.x][cur.mode][cur.check] < cur.cnt)
			continue;

		for (int i = 1; i <= 2; i++)
			if (visited[cur.y][cur.x][(cur.mode + i) % 3][cur.check] > cur.cnt + 1) {
				pq.push({ cur.y, cur.x, cur.cnt + 1, cur.check, (cur.mode + i) % 3 });
				visited[cur.y][cur.x][(cur.mode + i) % 3][cur.check] = cur.cnt + 1;
			}

		switch (cur.mode) {
		case 0:
			for (int i = 0; i < 8; i++) {
				int ny = cur.y + Kdy[i];
				int nx = cur.x + Kdx[i];
				if (!is_in_range(ny, nx)) continue;
				if (board[ny][nx] == cur.check + 1) {
					if (visited[ny][nx][cur.mode][cur.check + 1] > cur.cnt + 1) {
						pq.push({ ny, nx, cur.cnt + 1, cur.check + 1, cur.mode });
						visited[ny][nx][cur.mode][cur.check + 1] = cur.cnt + 1;
					}
				}
				else {
					if (visited[ny][nx][cur.mode][cur.check] > cur.cnt + 1) {
						pq.push({ ny, nx, cur.cnt + 1, cur.check, cur.mode });
						visited[ny][nx][cur.mode][cur.check] = cur.cnt + 1;
					}
				}
			}
			break;
		case 1:
			for (int i = 0; i < 4; i++) {
				for (int j = 1; j < N; j++) {
					int ny = cur.y + Bdy[i] * j;
					int nx = cur.x + Bdx[i] * j;
					if (!is_in_range(ny, nx)) continue;
					if (board[ny][nx] == cur.check + 1) {
						if (visited[ny][nx][cur.mode][cur.check + 1] > cur.cnt + 1) {
							pq.push({ ny, nx, cur.cnt + 1, cur.check + 1, cur.mode });
							visited[ny][nx][cur.mode][cur.check + 1] = cur.cnt + 1;
						}
					}
					else {
						if (visited[ny][nx][cur.mode][cur.check] > cur.cnt + 1) {
							pq.push({ ny, nx, cur.cnt + 1, cur.check, cur.mode });
							visited[ny][nx][cur.mode][cur.check] = cur.cnt + 1;
						}
					}
				}
			}
			break;
		case 2:
			for (int i = 0; i < 4; i++) {
				for (int j = 1; j < N; j++) {
					int ny = cur.y + Rdy[i] * j;
					int nx = cur.x + Rdx[i] * j;
					if (!is_in_range(ny, nx)) continue;
					if (board[ny][nx] == cur.check + 1) {
						if (visited[ny][nx][cur.mode][cur.check + 1] > cur.cnt + 1) {
							pq.push({ ny, nx, cur.cnt + 1, cur.check + 1, cur.mode });
							visited[ny][nx][cur.mode][cur.check + 1] = cur.cnt + 1;
						}
					}
					else {
						if (visited[ny][nx][cur.mode][cur.check] > cur.cnt + 1) {
							pq.push({ ny, nx, cur.cnt + 1, cur.check, cur.mode });
							visited[ny][nx][cur.mode][cur.check] = cur.cnt + 1;
						}
					}
				}
			}
		}
	}
	return -1;
}

int main(void) {
	cin.tie(NULL);
	ios_base::sync_with_stdio(false);
	cin >> N;
	target = N * N;
	for (int a = 0; a < 10; a++)
		for (int b = 0; b < 10; b++)
			for (int c = 0; c < 3; c++)
				for (int d = 0; d < 101; d++)
					visited[a][b][c][d] = INF;

	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++) {
			cin >> board[i][j];
			if (board[i][j] == 1)
				sy = i, sx = j;
		}

	cout << bfs(sy, sx);
}